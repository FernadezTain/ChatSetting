// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
let isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
let isLowPerformance = false;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function checkPerformance() {
    const start = performance.now();
    for (let i = 0; i < 1000; i++) {
        Math.sqrt(i);
    }
    const duration = performance.now() - start;
    isLowPerformance = duration > 2;
}

document.addEventListener('DOMContentLoaded', function() {
    checkPerformance();
    initializeNavigation();
    initializeToggles();
    initializeFormValidation();

    document.getElementById('applySettings').addEventListener('click', applySettings);

    document.getElementById('modalClose').addEventListener('click', function() {
        document.getElementById('loadingModal').classList.remove('active');
    });

    document.addEventListener('touchstart', function(e) {
        if (e.touches.length > 1) e.preventDefault();
    }, { passive: false });
});

// ------------------------- –ù–∞–≤–∏–≥–∞—Ü–∏—è -------------------------
function initializeNavigation() {
    const mainPage = document.getElementById('mainPage');
    const settingsPage = document.getElementById('settingsPage');
    const configureBtn = document.getElementById('configureChatBtn');
    const backBtn = document.getElementById('backBtn');

    configureBtn.addEventListener('click', () => {
        mainPage.classList.remove('active');
        settingsPage.classList.add('active');
    });

    backBtn.addEventListener('click', () => {
        settingsPage.classList.remove('active');
        mainPage.classList.add('active');
    });
}

// ------------------------- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ -------------------------
function initializeToggles() {
    const toggles = document.querySelectorAll('.toggle-switch');
    toggles.forEach(toggle => {
        toggle.addEventListener('click', function(e) {
            handleToggleClick(this, e);
        }, { passive: true });
    });
}

function handleToggleClick(toggle, e) {
    const wasActive = toggle.classList.contains('active');
    if (!wasActive) {
        toggle.classList.add('active');
        if (!isLowPerformance) createParticles(toggle, e);
    } else toggle.classList.remove('active');

    const toggleId = toggle.id.replace('Toggle', 'Content');
    const content = document.getElementById(toggleId);
    if (content) content.classList.toggle('active');

    validateForm();
}

function createParticles(element, event) {
    const particlesContainer = element.querySelector('.toggle-particles');
    const particleCount = isMobile ? 4 : 8;

    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        const angle = (i / particleCount) * Math.PI * 2;
        const distance = isMobile ? 20 : 30;
        const tx = Math.cos(angle) * distance;
        const ty = Math.sin(angle) * distance;

        particle.style.setProperty('--tx', `${tx}px`);
        particle.style.setProperty('--ty', `${ty}px`);
        particle.style.left = '50%';
        particle.style.top = '50%';

        particlesContainer.appendChild(particle);

        setTimeout(() => {
            if (particle.parentNode === particlesContainer)
                particlesContainer.removeChild(particle);
        }, 400);
    }
}

// ------------------------- –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã -------------------------
function initializeFormValidation() {
    const chatCodeInput = document.getElementById('chatCode');
    let timeoutId;

    chatCodeInput.addEventListener('input', () => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(validateForm, 100);
    }, { passive: true });

    document.querySelectorAll('.toggle-switch').forEach(toggle => {
        toggle.addEventListener('click', () => setTimeout(validateForm, 50), { passive: true });
    });
}

function validateForm() {
    const chatCodeInput = document.getElementById('chatCode');
    const applyButton = document.getElementById('applySettings');
    const greetingToggle = document.getElementById('greetingToggle');
    const greetingText = document.getElementById('greetingText');
    const farewellToggle = document.getElementById('farewellToggle');
    const farewellText = document.getElementById('farewellText');

    const isCodeValid = chatCodeInput.value.trim().length > 0;
    let isTextValid = true;

    if (greetingToggle.classList.contains('active') && greetingText.value.trim().length === 0) isTextValid = false;
    if (farewellToggle.classList.contains('active') && farewellText.value.trim().length === 0) isTextValid = false;

    applyButton.disabled = !(isCodeValid && isTextValid);
}

// ------------------------- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô applySettings -------------------------
async function applySettings() {
    const modal = document.getElementById('loadingModal');
    modal.classList.add('active');

    try {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = collectAllSettings();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const paramsString = formatSettingsToParams(settings);
        
        console.log('Settings string:', paramsString);
        
        // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal.classList.remove('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            showTelegramInstruction(paramsString);
            
        }, 3000);

    } catch (error) {
        console.error('Error applying settings:', error);
        modal.classList.remove('active');
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
    }
}

// ------------------------- –°–±–æ—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ -------------------------
function collectAllSettings() {
    const settings = {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        token: document.getElementById('chatCode').value.trim(),
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting: {
            enabled: document.getElementById('greetingToggle').classList.contains('active'),
            text: document.getElementById('greetingText').value.trim()
        },
        
        // –ü—Ä–æ—â–∞–Ω–∏–µ
        farewell: {
            enabled: document.getElementById('farewellToggle').classList.contains('active'),
            text: document.getElementById('farewellText').value.trim()
        },
        
        // –†–∞—Å—Å—ã–ª–∫–∞
        broadcast: document.getElementById('broadcastToggle').classList.contains('active')
    };
    
    return settings;
}

// ------------------------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ -------------------------
function formatSettingsToParams(settings) {
    let params = [];
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Ç–æ–∫–µ–Ω
    params.push(`CCCToken:${settings.token}`);
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
    if (settings.greeting.enabled && settings.greeting.text) {
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ \n
        const hiText = settings.greeting.text.replace(/\n/g, '\\n');
        params.push(`HiText:${hiText}`);
    }
    
    // –ü—Ä–æ—â–∞–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
    if (settings.farewell.enabled && settings.farewell.text) {
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ \n
        const goodbyeText = settings.farewell.text.replace(/\n/g, '\\n');
        params.push(`GoodByeText:${goodbyeText}`);
    }
    
    // –†–∞—Å—Å—ã–ª–∫–∞
    if (settings.broadcast) {
        params.push(`Broadcast:on`);
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
    return params.join(';');
}

// ------------------------- –ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Telegram -------------------------
function showTelegramInstruction(paramsString) {
    const instructionModal = document.createElement('div');
    instructionModal.innerHTML = `
        <div class="modal active" style="display: flex;">
            <div class="modal-content glass-effect" style="max-width: 500px;">
                <button class="modal-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
                <div class="modal-body">
                    <h3 style="margin-bottom: 15px; color: #00c6ff;">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                    <p style="margin-bottom: 20px; line-height: 1.5;">
                        –ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
                    </p>
                    <ol style="text-align: left; margin-bottom: 25px; padding-left: 20px; line-height: 1.6;">
                        <li style="margin-bottom: 10px;">–û—Ç–∫—Ä–æ–π—Ç–µ Telegram</li>
                        <li style="margin-bottom: 10px;">–ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ <strong>@FernieUIBot</strong></li>
                        <li style="margin-bottom: 10px;">–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É:</li>
                    </ol>
                    <div style="background: rgba(0,0,0,0.3); padding: 15px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(255,255,255,0.1);">
                        <code style="font-family: monospace; font-size: 14px; word-break: break-all;">
                            /start CSet$${paramsString}
                        </code>
                    </div>
                    <button onclick="copyToClipboard('/start CSet$${paramsString}')" 
                            style="background: linear-gradient(90deg, #00c6ff, #0072ff); 
                                   border: none; color: white; padding: 12px 25px; 
                                   border-radius: 25px; cursor: pointer; font-size: 14px;
                                   margin-bottom: 15px;">
                        üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
                    </button>
                    <p style="font-size: 12px; opacity: 0.7; margin-top: 10px;">
                        –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—ã—à–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –±–æ—Ç—É –≤ Telegram
                    </p>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(instructionModal);
}

// ------------------------- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ -------------------------
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        showNotification('–ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
    }).catch(err => {
        console.error('Failed to copy: ', err);
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    });
}

// ------------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -------------------------
function showNotification(message, type = 'success') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'error' ? '#ef4444' : '#10b981'};
        color: white;
        padding: 15px 25px;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        z-index: 1001;
        opacity: 0;
        transform: translateX(100px);
        transition: all 0.3s ease;
    `;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateX(0)';
    }, 10);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100px)';
        setTimeout(() => {
            if (notification.parentNode) {
                document.body.removeChild(notification);
            }
        }, 300);
    }, 5000);
}

// ------------------------- –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ -------------------------
document.addEventListener('touchmove', function(e) {
    if (e.target.classList.contains('toggle-switch')) {
        e.preventDefault();
    }
}, { passive: false });
